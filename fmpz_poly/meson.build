
src_fmpz_poly = ['2norm.c', '2norm_normalised_bits.c', 'CLD_bound.c', 'CRT_ui.c', 'add.c', 'add_series.c', 'bit_pack.c', 'bit_unpack.c', 'bound_roots.c', 'chebyshev_t.c', 'chebyshev_u.c', 'clear.c', 'compose.c', 'compose_divconquer.c', 'compose_horner.c', 'compose_series.c', 'compose_series_brent_kung.c', 'compose_series_horner.c', 'content.c', 'cos_minpoly.c', 'cyclotomic.c', 'deflate.c', 'deflation.c', 'derivative.c', 'discriminant.c', 'div.c', 'div_basecase.c', 'div_divconquer.c', 'div_divconquer_recursive.c', 'div_preinv.c', 'div_root.c', 'div_series.c', 'div_series_basecase.c', 'div_series_divconquer.c', 'divhigh_smodp.c', 'divides.c', 'divlow_smodp.c', 'divrem.c', 'divrem_basecase.c', 'divrem_divconquer.c', 'divrem_divconquer_recursive.c', 'divrem_preinv.c', 'divremlow_divconquer_recursive.c', 'equal.c', 'equal_trunc.c', 'eta_qexp.c', 'evaluate_divconquer_fmpq.c', 'evaluate_divconquer_fmpz.c', 'evaluate_fmpq.c', 'evaluate_fmpz.c', 'evaluate_fmpz_vec.c', 'evaluate_horner_d.c', 'evaluate_horner_d_2exp.c', 'evaluate_horner_fmpq.c', 'evaluate_horner_fmpz.c', 'evaluate_mod.c', 'evaluate_mpq.c', 'fibonacci.c', 'fit_length.c', 'fprint.c', 'fprint_pretty.c', 'fread.c', 'fread_pretty.c', 'gcd.c', 'gcd_heuristic.c', 'gcd_modular.c', 'gcd_subresultant.c', 'get_coeff_fmpz.c', 'get_coeff_si.c', 'get_coeff_ui.c', 'get_nmod_poly.c', 'get_str.c', 'get_str_pretty.c', 'hensel_build_tree.c', 'hensel_continue_lift.c', 'hensel_lift.c', 'hensel_lift_once.c', 'hensel_lift_only_inverse.c', 'hensel_lift_tree.c', 'hensel_lift_tree_recursive.c', 'hensel_lift_without_inverse.c', 'hensel_start_lift.c', 'hermite_h.c', 'hermite_he.c', 'inflate.c', 'init.c', 'inlines.c', 'interpolate_fmpz_vec.c', 'inv_series.c', 'inv_series_basecase.c', 'inv_series_newton.c', 'is_cyclotomic.c', 'is_squarefree.c', 'lcm.c', 'legendre_pt.c', 'monomial_to_newton.c', 'mul.c', 'mul_KS.c', 'mul_SS.c', 'mul_classical.c', 'mul_karatsuba.c', 'mulhigh_classical.c', 'mulhigh_karatsuba_n.c', 'mulhigh_n.c', 'mullow.c', 'mullow_KS.c', 'mullow_SS.c', 'mullow_SS_precache.c', 'mullow_classical.c', 'mullow_karatsuba_n.c', 'mulmid_classical.c', 'neg.c', 'newton_to_monomial.c', 'normalise.c', 'num_real_roots.c', 'num_real_roots_sturm.c', 'pow.c', 'pow_addchains.c', 'pow_binexp.c', 'pow_binomial.c', 'pow_multinomial.c', 'pow_small.c', 'pow_trunc.c', 'power_sums.c', 'power_sums_naive.c', 'power_sums_to_poly.c', 'powers_clear.c', 'powers_precompute.c', 'preinvert.c', 'primitive_part.c', 'product_roots_fmpq_vec.c', 'product_roots_fmpz_vec.c', 'pseudo_div.c', 'pseudo_divrem_basecase.c', 'pseudo_divrem_cohen.c', 'pseudo_divrem_divconquer.c', 'pseudo_rem.c', 'pseudo_rem_cohen.c', 'randtest.c', 'randtest_no_real_root.c', 'realloc.c', 'rem.c', 'rem_basecase.c', 'rem_powers_precomp.c', 'remove_content_2exp.c', 'resultant.c', 'resultant_euclidean.c', 'resultant_modular.c', 'resultant_modular_div.c', 'reverse.c', 'revert_series.c', 'revert_series_lagrange.c', 'revert_series_lagrange_fast.c', 'revert_series_newton.c', 'scalar_abs.c', 'scalar_addmul_fmpz.c', 'scalar_divexact_fmpz.c', 'scalar_divexact_si.c', 'scalar_divexact_ui.c', 'scalar_fdiv_2exp.c', 'scalar_fdiv_fmpz.c', 'scalar_fdiv_si.c', 'scalar_fdiv_ui.c', 'scalar_mul_2exp.c', 'scalar_mul_fmpz.c', 'scalar_mul_si.c', 'scalar_mul_ui.c', 'scalar_submul_fmpz.c', 'scalar_tdiv_2exp.c', 'scalar_tdiv_fmpz.c', 'scalar_tdiv_si.c', 'scalar_tdiv_ui.c', 'scale_2exp.c', 'set.c', 'set_coeff_fmpz.c', 'set_coeff_si.c', 'set_coeff_ui.c', 'set_fmpz.c', 'set_mpz.c', 'set_nmod_poly.c', 'set_nmod_poly_unsigned.c', 'set_si.c', 'set_str.c', 'set_trunc.c', 'set_ui.c', 'shift_left.c', 'shift_right.c', 'signature.c', 'sqr.c', 'sqr_KS.c', 'sqr_classical.c', 'sqr_karatsuba.c', 'sqrlow.c', 'sqrlow_KS.c', 'sqrlow_classical.c', 'sqrlow_karatsuba_n.c', 'sqrt.c', 'sqrt_KS.c', 'sqrt_classical.c', 'sqrt_divconquer.c', 'sqrt_series.c', 'sqrtrem_classical.c', 'sqrtrem_divconquer.c', 'sub.c', 'sub_series.c', 'swap.c', 'swinnerton_dyer.c', 'taylor_shift.c', 'taylor_shift_divconquer.c', 'taylor_shift_horner.c', 'taylor_shift_multi_mod_threaded.c', 'theta_qexp.c', 'xgcd_modular.c', 'zero_coeffs.c']

src_fmpz_poly += generated_headers

headers_fmpz_poly = files([])

headers += headers_fmpz_poly

fmpz_poly = static_library(
  'fmpz_poly',
  src_fmpz_poly,
  include_directories : include_dir,
  override_options : ['warning_level=0'],
  install : false)
