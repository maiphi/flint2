
src_nmod_poly = files(['KS2_pack.c', 'KS2_reduce.c', 'KS2_unpack.c', 'add.c', 'add_series.c', 'add_ui.c', 'asin_series.c', 'asinh_series.c', 'atan_series.c', 'atanh_series.c', 'berlekamp_massey.c', 'bit_pack.c', 'bit_unpack.c', 'clear.c', 'compose.c', 'compose_divconquer.c', 'compose_horner.c', 'compose_mod.c', 'compose_mod_brent_kung.c', 'compose_mod_brent_kung_precomp_preinv.c', 'compose_mod_brent_kung_preinv.c', 'compose_mod_brent_kung_vec_preinv.c', 'compose_mod_brent_kung_vec_preinv_threaded.c', 'compose_mod_horner.c', 'compose_series.c', 'compose_series_brent_kung.c', 'compose_series_divconquer.c', 'compose_series_horner.c', 'cos_series.c', 'cosh_series.c', 'deflate.c', 'deflation.c', 'derivative.c', 'discriminant.c', 'div.c', 'div_basecase.c', 'div_divconquer.c', 'div_divconquer_recursive.c', 'div_newton.c', 'div_newton_n_preinv.c', 'div_root.c', 'div_series.c', 'div_series_basecase.c', 'divrem.c', 'divrem_basecase.c', 'divrem_divconquer.c', 'divrem_divconquer_recursive.c', 'divrem_newton.c', 'divrem_newton_n_preinv.c', 'divrem_q0.c', 'divrem_q1.c', 'equal_trunc.c', 'evaluate_fmpz.c', 'evaluate_mat_horner.c', 'evaluate_mat_paterson_stockmeyer.c', 'evaluate_nmod.c', 'evaluate_nmod_vec.c', 'evaluate_nmod_vec_fast.c', 'evaluate_nmod_vec_iter.c', 'exp_series.c', 'exp_series_basecase.c', 'exp_series_monomial_ui.c', 'find_distinct_nonzero_roots.c', 'fit_length.c', 'fprintf_pretty.c', 'fread.c', 'gcd.c', 'gcd_euclidean.c', 'gcd_hgcd.c', 'gcdinv.c', 'get_str.c', 'get_str_pretty.c', 'hgcd.c', 'inflate.c', 'init.c', 'init2.c', 'inlines.c', 'integral.c', 'interpolate_nmod_vec.c', 'interpolate_nmod_vec_barycentric.c', 'interpolate_nmod_vec_fast.c', 'interpolate_nmod_vec_newton.c', 'inv_series_basecase.c', 'inv_series_newton.c', 'invmod.c', 'invsqrt_series.c', 'log_series.c', 'log_series_monomial_ui.c', 'make_monic.c', 'mul.c', 'mul_KS.c', 'mul_KS2.c', 'mul_KS4.c', 'mul_classical.c', 'mulhigh.c', 'mulhigh_classical.c', 'mullow.c', 'mullow_KS.c', 'mullow_classical.c', 'mulmod.c', 'mulmod_preinv.c', 'multi_crt.c', 'neg.c', 'pow.c', 'pow_binexp.c', 'pow_trunc.c', 'pow_trunc_binexp.c', 'power_sums.c', 'power_sums_naive.c', 'power_sums_schoenhage.c', 'power_sums_to_poly.c', 'power_sums_to_poly_naive.c', 'power_sums_to_poly_schoenhage.c', 'powers_mod_bsgs_threaded.c', 'powers_mod_naive.c', 'powmod_fmpz_binexp.c', 'powmod_fmpz_binexp_preinv.c', 'powmod_mpz_binexp.c', 'powmod_mpz_binexp_preinv.c', 'powmod_ui_binexp.c', 'powmod_ui_binexp_preinv.c', 'powmod_x_fmpz_preinv.c', 'powmod_x_ui_preinv.c', 'product_roots_nmod_vec.c', 'randtest.c', 'randtest_monic_primitive.c', 'realloc.c', 'rem.c', 'rem_basecase.c', 'rem_q1.c', 'remove.c', 'resultant_euclidean.c', 'resultant_hgcd.c', 'reverse.c', 'revert_series.c', 'revert_series_lagrange.c', 'revert_series_lagrange_fast.c', 'revert_series_newton.c', 'scalar_mul_nmod.c', 'set_coeff_ui.c', 'set_str.c', 'set_trunc.c', 'shift_left.c', 'shift_right.c', 'sin_series.c', 'sinh_series.c', 'sqrt.c', 'sqrt_series.c', 'sub.c', 'sub_series.c', 'sub_ui.c', 'tan_series.c', 'tanh_series.c', 'taylor_shift.c', 'taylor_shift_convolution.c', 'taylor_shift_horner.c', 'tree.c', 'xgcd.c', 'xgcd_euclidean.c', 'xgcd_hgcd.c'])

headers += files([])

if meson.version().version_compare('>=0.55.0')
  src += src_nmod_poly
else
  src_nmod_poly += generated_headers
  nmod_poly = static_library(
    'nmod_poly',
    src_nmod_poly,
    include_directories : include_dir,
    override_options : [override_warning_level],
    install : false)
  subdir_static_libs += nmod_poly
endif
